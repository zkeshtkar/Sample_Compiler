// DO NOT EDIT
// Generated by JFlex 1.8.1 http://jflex.de/
// source: 2.flex
package Lexical;
import java.io.IOException;
 /*user codes */

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int CHARACTER = 2;
  public static final int STRING = 4;
  public static final int SINGLE_COMMENT = 6;
  public static final int MULT_COMMENT = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\3\1\4\22\0\1\3"+
    "\1\5\1\6\2\0\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\11\23"+
    "\1\24\1\25\1\26\1\27\1\30\2\0\4\31\1\32"+
    "\1\33\5\34\1\35\16\34\1\36\1\37\1\40\1\41"+
    "\1\42\1\0\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\34\1\54\1\55\1\34\1\56"+
    "\1\57\1\60\1\34\1\61\1\62\1\63\1\64\1\65"+
    "\1\66\1\67\1\34\1\70\1\0\1\71\1\0\1\72"+
    "\u0181\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\2\2\1\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\2\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\20\25\1\31\1\32\1\33\1\34\1\1"+
    "\1\35\1\36\1\1\3\37\1\1\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\0\1\46\1\47\1\50"+
    "\1\51\1\52\2\0\1\17\1\0\1\53\1\54\1\55"+
    "\20\25\1\56\1\57\4\25\1\60\1\61\10\25\1\62"+
    "\1\35\1\0\2\47\1\0\1\63\1\64\1\65\12\25"+
    "\1\66\2\25\1\67\2\25\1\70\1\71\1\25\1\72"+
    "\1\73\13\25\3\0\1\74\2\25\1\75\4\25\1\76"+
    "\14\25\1\77\1\25\1\100\2\0\1\101\1\102\1\103"+
    "\3\25\1\104\2\25\1\105\5\25\1\106\1\25\1\107"+
    "\5\25\1\110\1\111\1\112\1\113\1\114\1\25\1\115"+
    "\1\116\1\25\1\117\1\120\1\121";

  private static int [] zzUnpackAction() {
    int [] result = new int[217];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\261\0\354\0\u0127\0\u0127\0\u0162"+
    "\0\u019d\0\u0127\0\u01d8\0\u0127\0\u0127\0\u0127\0\u0127\0\u0213"+
    "\0\u024e\0\u0127\0\u0289\0\u02c4\0\u02ff\0\u033a\0\u0375\0\u0127"+
    "\0\u0127\0\u03b0\0\u03eb\0\u0426\0\u0461\0\u0127\0\u049c\0\u0127"+
    "\0\u04d7\0\u0512\0\u054d\0\u0588\0\u05c3\0\u05fe\0\u0639\0\u0674"+
    "\0\u06af\0\u06ea\0\u0725\0\u0760\0\u079b\0\u07d6\0\u0811\0\u084c"+
    "\0\u0127\0\u0127\0\u0127\0\u0127\0\u0887\0\u08c2\0\u0127\0\u08fd"+
    "\0\u0938\0\u0973\0\u0127\0\u09ae\0\u09e9\0\u0127\0\u0127\0\u0127"+
    "\0\u0127\0\u0127\0\u0127\0\u02c4\0\u0127\0\u0a24\0\u0127\0\u0127"+
    "\0\u0127\0\u0a5f\0\u0a9a\0\u0127\0\u0ad5\0\u0127\0\u0127\0\u0127"+
    "\0\u0b10\0\u0b4b\0\u0b86\0\u0bc1\0\u0bfc\0\u0c37\0\u0c72\0\u0cad"+
    "\0\u0ce8\0\u0d23\0\u0d5e\0\u0d99\0\u0dd4\0\u0e0f\0\u0e4a\0\u0e85"+
    "\0\u0461\0\u0ec0\0\u0efb\0\u0f36\0\u0f71\0\u0fac\0\u0461\0\u0461"+
    "\0\u0fe7\0\u1022\0\u105d\0\u1098\0\u10d3\0\u110e\0\u1149\0\u1184"+
    "\0\u0127\0\u11bf\0\u11fa\0\u1235\0\u1270\0\u12ab\0\u12ab\0\u0ad5"+
    "\0\u0461\0\u12e6\0\u1321\0\u135c\0\u1397\0\u13d2\0\u140d\0\u1448"+
    "\0\u1483\0\u14be\0\u14f9\0\u0461\0\u1534\0\u156f\0\u15aa\0\u15e5"+
    "\0\u1620\0\u0461\0\u0461\0\u165b\0\u0461\0\u0461\0\u1696\0\u16d1"+
    "\0\u170c\0\u1747\0\u1782\0\u17bd\0\u17f8\0\u1833\0\u186e\0\u18a9"+
    "\0\u18e4\0\u08fd\0\u191f\0\u195a\0\u0461\0\u1995\0\u19d0\0\u0461"+
    "\0\u1a0b\0\u1a46\0\u1a81\0\u1abc\0\u0461\0\u1af7\0\u1b32\0\u1b6d"+
    "\0\u1ba8\0\u1be3\0\u1c1e\0\u1c59\0\u1c94\0\u1ccf\0\u1d0a\0\u1d45"+
    "\0\u1d80\0\u0461\0\u1dbb\0\u0461\0\u1df6\0\u1270\0\u0461\0\u0461"+
    "\0\u0461\0\u1e31\0\u1e6c\0\u1ea7\0\u0461\0\u1ee2\0\u1f1d\0\u0461"+
    "\0\u1f58\0\u1f93\0\u1fce\0\u2009\0\u2044\0\u0461\0\u207f\0\u0461"+
    "\0\u20ba\0\u20f5\0\u2130\0\u216b\0\u21a6\0\u0461\0\u0461\0\u0461"+
    "\0\u0461\0\u0461\0\u21e1\0\u0461\0\u0461\0\u221c\0\u0461\0\u0461"+
    "\0\u0461";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[217];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\3\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\5\35"+
    "\1\36\1\6\1\37\1\40\1\6\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\2\35\1\47\1\35\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\3\35"+
    "\1\61\1\62\1\63\2\6\1\63\1\6\1\63\1\6"+
    "\2\63\1\64\25\63\1\65\33\63\1\66\2\6\1\66"+
    "\1\6\1\66\1\67\2\66\1\6\25\66\1\70\33\66"+
    "\2\71\1\64\70\71\1\72\2\73\1\72\1\74\7\72"+
    "\1\75\4\72\1\6\51\72\75\0\1\7\117\0\1\76"+
    "\72\0\1\77\72\0\1\100\60\0\1\101\11\0\1\102"+
    "\62\0\1\103\1\104\1\0\1\26\1\27\3\0\1\105"+
    "\65\0\2\106\63\0\1\107\4\0\1\110\5\0\1\111"+
    "\63\0\1\106\1\0\2\112\6\0\1\113\2\0\1\114"+
    "\11\0\1\113\5\0\1\114\11\0\1\115\23\0\1\106"+
    "\1\0\2\27\6\0\1\113\2\0\1\114\11\0\1\113"+
    "\5\0\1\114\44\0\1\116\72\0\1\117\72\0\1\120"+
    "\65\0\2\35\5\0\5\35\4\0\27\35\40\0\1\22"+
    "\56\0\2\35\5\0\5\35\4\0\14\35\1\121\5\35"+
    "\1\122\4\35\24\0\2\35\5\0\5\35\4\0\5\35"+
    "\1\123\7\35\1\124\1\35\1\125\7\35\24\0\2\35"+
    "\5\0\5\35\4\0\1\35\1\126\6\35\1\127\4\35"+
    "\1\130\11\35\24\0\2\35\5\0\5\35\4\0\5\35"+
    "\1\131\7\35\1\132\11\35\24\0\2\35\5\0\5\35"+
    "\4\0\13\35\1\133\1\134\12\35\24\0\2\35\5\0"+
    "\5\35\4\0\1\35\1\135\11\35\1\136\1\35\1\137"+
    "\4\35\1\140\4\35\24\0\2\35\5\0\5\35\4\0"+
    "\6\35\1\141\5\35\1\142\12\35\24\0\2\35\5\0"+
    "\5\35\4\0\5\35\1\143\7\35\1\144\11\35\24\0"+
    "\2\35\5\0\5\35\4\0\5\35\1\145\7\35\1\146"+
    "\11\35\24\0\2\35\5\0\5\35\4\0\6\35\1\147"+
    "\10\35\1\150\7\35\24\0\2\35\5\0\5\35\4\0"+
    "\17\35\1\151\7\35\24\0\2\35\5\0\5\35\4\0"+
    "\5\35\1\152\21\35\24\0\2\35\5\0\5\35\4\0"+
    "\11\35\1\153\7\35\1\154\2\35\1\155\2\35\24\0"+
    "\2\35\5\0\5\35\4\0\17\35\1\156\7\35\24\0"+
    "\2\35\5\0\5\35\4\0\14\35\1\157\12\35\24\0"+
    "\2\35\5\0\5\35\4\0\15\35\1\160\11\35\10\0"+
    "\1\161\2\0\1\161\25\0\1\161\16\0\1\161\2\0"+
    "\1\161\1\0\1\161\7\0\1\66\2\0\1\66\1\0"+
    "\1\66\1\0\2\66\1\0\25\66\1\0\33\66\6\0"+
    "\1\162\2\0\1\162\25\0\1\162\16\0\1\162\2\0"+
    "\1\162\1\0\1\162\7\0\2\71\1\0\70\71\1\72"+
    "\2\0\1\72\1\0\7\72\1\0\4\72\1\0\51\72"+
    "\2\0\1\73\111\0\1\64\71\0\1\163\1\0\2\164"+
    "\6\0\1\113\1\165\13\0\1\113\1\165\42\0\1\106"+
    "\1\0\2\112\6\0\1\113\14\0\1\113\40\0\1\166"+
    "\1\0\1\166\2\0\2\167\71\0\2\170\5\0\3\170"+
    "\7\0\6\170\44\0\2\35\5\0\5\35\4\0\4\35"+
    "\1\171\22\35\24\0\2\35\5\0\5\35\4\0\21\35"+
    "\1\172\5\35\24\0\2\35\5\0\5\35\4\0\7\35"+
    "\1\173\17\35\24\0\2\35\5\0\5\35\4\0\15\35"+
    "\1\174\11\35\24\0\2\35\5\0\5\35\4\0\5\35"+
    "\1\175\21\35\24\0\2\35\5\0\5\35\4\0\20\35"+
    "\1\176\6\35\24\0\2\35\5\0\5\35\4\0\1\35"+
    "\1\177\25\35\24\0\2\35\5\0\5\35\4\0\14\35"+
    "\1\200\12\35\24\0\2\35\5\0\5\35\4\0\6\35"+
    "\1\201\20\35\24\0\2\35\5\0\5\35\4\0\22\35"+
    "\1\202\4\35\24\0\2\35\5\0\5\35\4\0\20\35"+
    "\1\203\6\35\24\0\2\35\5\0\5\35\4\0\4\35"+
    "\1\204\22\35\24\0\2\35\5\0\5\35\4\0\13\35"+
    "\1\205\13\35\24\0\2\35\5\0\5\35\4\0\15\35"+
    "\1\206\11\35\24\0\2\35\5\0\5\35\4\0\17\35"+
    "\1\207\7\35\24\0\2\35\5\0\5\35\4\0\14\35"+
    "\1\210\12\35\24\0\2\35\5\0\5\35\4\0\16\35"+
    "\1\211\2\35\1\212\5\35\24\0\2\35\5\0\5\35"+
    "\4\0\14\35\1\213\12\35\24\0\2\35\5\0\5\35"+
    "\4\0\14\35\1\214\12\35\24\0\2\35\5\0\5\35"+
    "\4\0\24\35\1\215\2\35\24\0\2\35\5\0\5\35"+
    "\4\0\21\35\1\216\5\35\24\0\2\35\5\0\5\35"+
    "\4\0\11\35\1\217\15\35\24\0\2\35\5\0\5\35"+
    "\4\0\3\35\1\220\12\35\1\221\2\35\1\222\5\35"+
    "\24\0\2\35\5\0\5\35\4\0\26\35\1\223\24\0"+
    "\2\35\5\0\5\35\4\0\1\35\1\224\15\35\1\225"+
    "\7\35\24\0\2\35\5\0\5\35\4\0\11\35\1\226"+
    "\15\35\24\0\2\35\5\0\5\35\4\0\22\35\1\227"+
    "\4\35\24\0\2\35\5\0\5\35\4\0\21\35\1\230"+
    "\5\35\24\0\2\35\5\0\5\35\4\0\11\35\1\231"+
    "\15\35\41\0\1\232\55\0\2\233\67\0\1\233\1\0"+
    "\2\164\6\0\1\113\1\165\13\0\1\113\1\165\42\0"+
    "\1\163\1\0\2\234\6\0\1\113\14\0\1\113\45\0"+
    "\2\167\71\0\2\35\5\0\5\35\4\0\15\35\1\235"+
    "\11\35\24\0\2\35\5\0\5\35\4\0\11\35\1\236"+
    "\15\35\24\0\2\35\5\0\5\35\4\0\13\35\1\212"+
    "\13\35\24\0\2\35\5\0\5\35\4\0\1\35\1\237"+
    "\25\35\24\0\2\35\5\0\5\35\4\0\5\35\1\240"+
    "\21\35\24\0\2\35\5\0\5\35\4\0\17\35\1\212"+
    "\7\35\24\0\2\35\5\0\5\35\4\0\20\35\1\241"+
    "\1\242\5\35\24\0\2\35\5\0\5\35\4\0\1\35"+
    "\1\243\25\35\24\0\2\35\5\0\5\35\4\0\2\35"+
    "\1\244\24\35\24\0\2\35\5\0\5\35\4\0\5\35"+
    "\1\245\21\35\24\0\2\35\5\0\5\35\4\0\20\35"+
    "\1\246\6\35\24\0\2\35\5\0\5\35\4\0\1\35"+
    "\1\247\25\35\24\0\2\35\5\0\5\35\4\0\5\35"+
    "\1\250\21\35\24\0\2\35\5\0\5\35\4\0\3\35"+
    "\1\251\23\35\24\0\2\35\5\0\5\35\4\0\22\35"+
    "\1\252\4\35\24\0\2\35\5\0\5\35\4\0\7\35"+
    "\1\212\17\35\24\0\2\35\5\0\5\35\4\0\14\35"+
    "\1\253\12\35\24\0\2\35\5\0\5\35\4\0\15\35"+
    "\1\254\11\35\24\0\2\35\5\0\5\35\4\0\5\35"+
    "\1\255\21\35\24\0\2\35\5\0\5\35\4\0\22\35"+
    "\1\256\4\35\24\0\2\35\5\0\5\35\4\0\5\35"+
    "\1\257\21\35\24\0\2\35\5\0\5\35\4\0\17\35"+
    "\1\260\7\35\24\0\2\35\5\0\5\35\4\0\11\35"+
    "\1\144\15\35\24\0\2\35\5\0\5\35\4\0\21\35"+
    "\1\261\5\35\24\0\2\35\5\0\5\35\4\0\5\35"+
    "\1\262\21\35\24\0\2\35\5\0\5\35\4\0\11\35"+
    "\1\263\15\35\24\0\2\35\5\0\5\35\4\0\4\35"+
    "\1\264\22\35\22\0\1\163\1\0\2\265\6\0\1\113"+
    "\1\266\13\0\1\113\1\266\42\0\1\233\1\0\2\234"+
    "\6\0\1\113\14\0\1\113\45\0\2\35\5\0\5\35"+
    "\4\0\14\35\1\267\12\35\24\0\2\35\5\0\5\35"+
    "\4\0\12\35\1\270\14\35\24\0\2\35\5\0\5\35"+
    "\4\0\21\35\1\271\5\35\24\0\2\35\5\0\5\35"+
    "\4\0\11\35\1\272\15\35\24\0\2\35\5\0\5\35"+
    "\4\0\22\35\1\273\4\35\24\0\2\35\5\0\5\35"+
    "\4\0\13\35\1\274\13\35\24\0\2\35\5\0\5\35"+
    "\4\0\5\35\1\275\21\35\24\0\2\35\5\0\5\35"+
    "\4\0\21\35\1\212\5\35\24\0\2\35\5\0\5\35"+
    "\4\0\1\35\1\276\25\35\24\0\2\35\5\0\5\35"+
    "\4\0\21\35\1\277\5\35\24\0\2\35\5\0\5\35"+
    "\4\0\21\35\1\300\5\35\24\0\2\35\5\0\5\35"+
    "\4\0\21\35\1\301\5\35\24\0\2\35\5\0\5\35"+
    "\4\0\17\35\1\302\7\35\24\0\2\35\5\0\5\35"+
    "\4\0\1\35\1\303\25\35\24\0\2\35\5\0\5\35"+
    "\4\0\17\35\1\304\7\35\24\0\2\35\5\0\5\35"+
    "\4\0\15\35\1\305\11\35\24\0\2\35\5\0\5\35"+
    "\4\0\21\35\1\306\5\35\24\0\2\35\5\0\5\35"+
    "\4\0\3\35\1\307\23\35\24\0\2\35\5\0\5\35"+
    "\4\0\13\35\1\310\13\35\22\0\1\233\1\0\2\265"+
    "\6\0\1\113\1\266\13\0\1\113\1\266\44\0\2\35"+
    "\5\0\5\35\4\0\14\35\1\311\12\35\24\0\2\35"+
    "\5\0\5\35\4\0\13\35\1\312\13\35\24\0\2\35"+
    "\5\0\5\35\4\0\5\35\1\212\21\35\24\0\2\35"+
    "\5\0\5\35\4\0\3\35\1\313\23\35\24\0\2\35"+
    "\5\0\5\35\4\0\11\35\1\314\15\35\24\0\2\35"+
    "\5\0\5\35\4\0\13\35\1\315\13\35\24\0\2\35"+
    "\5\0\5\35\4\0\4\35\1\316\22\35\24\0\2\35"+
    "\5\0\5\35\4\0\21\35\1\317\5\35\24\0\2\35"+
    "\5\0\5\35\4\0\14\35\1\320\12\35\24\0\2\35"+
    "\5\0\5\35\4\0\6\35\1\321\20\35\24\0\2\35"+
    "\5\0\5\35\4\0\10\35\1\322\16\35\24\0\2\35"+
    "\5\0\5\35\4\0\22\35\1\323\4\35\24\0\2\35"+
    "\5\0\5\35\4\0\21\35\1\324\5\35\24\0\2\35"+
    "\5\0\5\35\4\0\10\35\1\325\16\35\24\0\2\35"+
    "\5\0\5\35\4\0\15\35\1\326\11\35\24\0\2\35"+
    "\5\0\5\35\4\0\14\35\1\327\12\35\24\0\2\35"+
    "\5\0\5\35\4\0\5\35\1\330\21\35\24\0\2\35"+
    "\5\0\5\35\4\0\14\35\1\331\12\35\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8791];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\2\11\2\1\1\11\1\1\4\11\2\1\1\11"+
    "\5\1\2\11\4\1\1\11\1\1\1\11\20\1\4\11"+
    "\2\1\1\11\3\1\1\11\2\1\6\11\1\0\1\11"+
    "\1\1\3\11\2\0\1\11\1\0\3\11\40\1\1\11"+
    "\1\1\1\0\2\1\1\0\43\1\3\0\30\1\2\0"+
    "\43\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[217];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
private boolean flag = false;
private HashSet<String> records = new HashSet<String>();
private MySymbol symbol(String token)
{
    System.err.println("Obtain token " + token + " \"" + yytext() + "\"" );
    return new MySymbol(token, yytext());
}
private MySymbol symbol(String token, Object val) {
    System.err.println( "Obtain token " + token + " \"" + yytext() + "\"" );
    return new MySymbol(token, val);
}
 StringBuilder string = new StringBuilder();


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Scanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public MySymbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
              {
                return symbol("$");
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { throw new RuntimeException("Illegal character \""+yytext()+
                                        "\" at line "+yyline+", column "+yycolumn);
            }
            // fall through
          case 82: break;
          case 2:
            { /* skip */
            }
            // fall through
          case 83: break;
          case 3:
            { yybegin(STRING); string.setLength(0); string.append("\"");
            }
            // fall through
          case 84: break;
          case 4:
            { return symbol("%");
            }
            // fall through
          case 85: break;
          case 5:
            { return symbol("&");
            }
            // fall through
          case 86: break;
          case 6:
            { yybegin(CHARACTER);string.setLength(0); string.append("'");
            }
            // fall through
          case 87: break;
          case 7:
            { return symbol("(");
            }
            // fall through
          case 88: break;
          case 8:
            { return symbol(")");
            }
            // fall through
          case 89: break;
          case 9:
            { return symbol("*");
            }
            // fall through
          case 90: break;
          case 10:
            { return symbol("+");
            }
            // fall through
          case 91: break;
          case 11:
            { return symbol("va");
            }
            // fall through
          case 92: break;
          case 12:
            { return symbol("-");
            }
            // fall through
          case 93: break;
          case 13:
            { return symbol(".");
            }
            // fall through
          case 94: break;
          case 14:
            { return symbol("/");
            }
            // fall through
          case 95: break;
          case 15:
            { return symbol("int_const", Integer.valueOf(yytext()));
            }
            // fall through
          case 96: break;
          case 16:
            { return symbol(":");
            }
            // fall through
          case 97: break;
          case 17:
            { return symbol(";");
            }
            // fall through
          case 98: break;
          case 18:
            { return symbol("<");
            }
            // fall through
          case 99: break;
          case 19:
            { return symbol("=");
            }
            // fall through
          case 100: break;
          case 20:
            { return symbol(">");
            }
            // fall through
          case 101: break;
          case 21:
            { String temp = yytext();

                            if(records.contains(temp)){
                                flag = false;
                                return symbol("rec_id",temp);
                            } if(flag){
                                flag = false;
                                records.add(temp);
                                return symbol("rec_id",temp);
                            }
                            return symbol("id",temp);
            }
            // fall through
          case 102: break;
          case 22:
            { return symbol("[");
            }
            // fall through
          case 103: break;
          case 23:
            { return symbol("]");
            }
            // fall through
          case 104: break;
          case 24:
            { return symbol("^");
            }
            // fall through
          case 105: break;
          case 25:
            { return symbol("|");
            }
            // fall through
          case 106: break;
          case 26:
            { return symbol("tilda");
            }
            // fall through
          case 107: break;
          case 27:
            { return symbol("char", yytext().charAt(0));
            }
            // fall through
          case 108: break;
          case 28:
            { yybegin(YYINITIAL);
            }
            // fall through
          case 109: break;
          case 29:
            { string.append(yytext());
            }
            // fall through
          case 110: break;
          case 30:
            { yybegin(YYINITIAL); string.append("\""); StringBuilder temp = string; string = new StringBuilder(); return symbol("string", temp.toString());
            }
            // fall through
          case 111: break;
          case 31:
            { 
            }
            // fall through
          case 112: break;
          case 32:
            { return symbol("!=");
            }
            // fall through
          case 113: break;
          case 33:
            { return symbol("%=");
            }
            // fall through
          case 114: break;
          case 34:
            { return symbol("*=");
            }
            // fall through
          case 115: break;
          case 35:
            { return symbol("++");
            }
            // fall through
          case 116: break;
          case 36:
            { return symbol("+=");
            }
            // fall through
          case 117: break;
          case 37:
            { return symbol("--");
            }
            // fall through
          case 118: break;
          case 38:
            { return symbol("-=");
            }
            // fall through
          case 119: break;
          case 39:
            { return symbol("real_const", Double.valueOf(yytext()));
            }
            // fall through
          case 120: break;
          case 40:
            { yybegin(MULT_COMMENT); string.setLength(0); string.append("/*");
            }
            // fall through
          case 121: break;
          case 41:
            { yybegin(SINGLE_COMMENT); string.setLength(0); string.append("//");
            }
            // fall through
          case 122: break;
          case 42:
            { return symbol("/=");
            }
            // fall through
          case 123: break;
          case 43:
            { return symbol("<=");
            }
            // fall through
          case 124: break;
          case 44:
            { return symbol("==");
            }
            // fall through
          case 125: break;
          case 45:
            { return symbol(">=");
            }
            // fall through
          case 126: break;
          case 46:
            { return symbol("if");
            }
            // fall through
          case 127: break;
          case 47:
            { return symbol("in");
            }
            // fall through
          case 128: break;
          case 48:
            { return symbol("of");
            }
            // fall through
          case 129: break;
          case 49:
            { return symbol("or");
            }
            // fall through
          case 130: break;
          case 50:
            { return symbol("char" ,yytext().charAt(0));
            }
            // fall through
          case 131: break;
          case 51:
            { return symbol("real_const", yytext());
            }
            // fall through
          case 132: break;
          case 52:
            { return symbol("int_const", yytext());
            }
            // fall through
          case 133: break;
          case 53:
            { return symbol("and");
            }
            // fall through
          case 134: break;
          case 54:
            { return symbol("end");
            }
            // fall through
          case 135: break;
          case 55:
            { return symbol("for");
            }
            // fall through
          case 136: break;
          case 56:
            { return symbol("base_type");
            }
            // fall through
          case 137: break;
          case 57:
            { return symbol("len");
            }
            // fall through
          case 138: break;
          case 58:
            { return symbol("new");
            }
            // fall through
          case 139: break;
          case 59:
            { return symbol("not");
            }
            // fall through
          case 140: break;
          case 60:
            { return symbol("auto");
            }
            // fall through
          case 141: break;
          case 61:
            { return symbol("case");
            }
            // fall through
          case 142: break;
          case 62:
            { return symbol("else");
            }
            // fall through
          case 143: break;
          case 63:
            { return symbol("true", Boolean.valueOf(yytext()));
            }
            // fall through
          case 144: break;
          case 64:
            { return symbol("void");
            }
            // fall through
          case 145: break;
          case 65:
            { return symbol("begin");
            }
            // fall through
          case 146: break;
          case 66:
            { return symbol("break");
            }
            // fall through
          case 147: break;
          case 67:
            { return symbol("const");
            }
            // fall through
          case 148: break;
          case 68:
            { return symbol("false", Boolean.valueOf(yytext()));
            }
            // fall through
          case 149: break;
          case 69:
            { return symbol("input");
            }
            // fall through
          case 150: break;
          case 70:
            { return symbol("start");
            }
            // fall through
          case 151: break;
          case 71:
            { return symbol("until");
            }
            // fall through
          case 152: break;
          case 72:
            { flag = true; return symbol("record");
            }
            // fall through
          case 153: break;
          case 73:
            { return symbol("repeat");
            }
            // fall through
          case 154: break;
          case 74:
            { return symbol("return");
            }
            // fall through
          case 155: break;
          case 75:
            { return symbol("sizeof");
            }
            // fall through
          case 156: break;
          case 76:
            { return symbol("switch");
            }
            // fall through
          case 157: break;
          case 77:
            { return symbol("default");
            }
            // fall through
          case 158: break;
          case 78:
            { return symbol("foreach");
            }
            // fall through
          case 159: break;
          case 79:
            { return symbol("println");
            }
            // fall through
          case 160: break;
          case 80:
            { return symbol("continue");
            }
            // fall through
          case 161: break;
          case 81:
            { return symbol("function");
            }
            // fall through
          case 162: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}

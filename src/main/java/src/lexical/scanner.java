package src.lexical;

import syntax.Lexical;// DO NOT EDIT
// Generated by JFlex 1.8.1 http://jflex.de/
// source: scanner.flex

import java.io.IOException;
import java.util.HashSet;
/*user codes */

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class scanner implements Lexical {
    private MySymbol currentSymbol = null;
    /**
     * This character denotes the end of file.
     */
    public static final int YYEOF = -1;

    /**
     * Initial size of the lookahead buffer.
     */
    private static final int ZZ_BUFFERSIZE = 16384;

    // Lexical states.
    public static final int YYINITIAL = 0;
    public static final int CHARACTER = 2;
    public static final int STRING = 4;
    public static final int SINGLE_COMMENT = 6;
    public static final int MULT_COMMENT = 8;

    /**
     * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
     * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
     * at the beginning of a line
     * l is of the form l = 2*k, k a non negative integer
     */
    private static final int ZZ_LEXSTATE[] = {
            0, 0, 1, 1, 2, 2, 3, 3, 4, 4
    };

    /**
     * Top-level table for translating characters to character classes
     */
    private static final int[] ZZ_CMAP_TOP = zzUnpackcmap_top();

    private static final String ZZ_CMAP_TOP_PACKED_0 =
            "\1\0\u10ff\u0100";

    private static int[] zzUnpackcmap_top() {
        int[] result = new int[4352];
        int offset = 0;
        offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackcmap_top(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /**
     * Second-level tables for translating characters to character classes
     */
    private static final int[] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

    private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
            "\11\0\1\1\1\2\1\0\1\3\1\4\22\0\1\3" +
                    "\1\5\1\6\2\0\1\7\1\10\1\11\1\12\1\13" +
                    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\11\23" +
                    "\1\24\1\25\1\26\1\27\1\30\2\0\4\31\1\32" +
                    "\1\33\5\34\1\35\16\34\1\36\1\37\1\40\1\41" +
                    "\1\42\1\0\1\43\1\44\1\45\1\46\1\47\1\50" +
                    "\1\51\1\52\1\53\1\34\1\54\1\55\1\34\1\56" +
                    "\1\57\1\60\1\34\1\61\1\62\1\63\1\64\1\65" +
                    "\1\66\1\67\1\34\1\70\1\71\1\72\1\73\1\74" +
                    "\u0181\0";

    private static int[] zzUnpackcmap_blocks() {
        int[] result = new int[512];
        int offset = 0;
        offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackcmap_blocks(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /**
     * Translates DFA states to action switch labels.
     */
    private static final int[] ZZ_ACTION = zzUnpackAction();

    private static final String ZZ_ACTION_PACKED_0 =
            "\5\0\1\1\2\2\1\1\1\3\1\4\1\5\1\6" +
                    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16" +
                    "\2\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26" +
                    "\1\27\1\30\20\25\1\31\1\32\1\33\1\34\1\35" +
                    "\1\36\1\1\1\37\1\40\1\1\3\41\1\1\1\41" +
                    "\1\42\1\43\1\44\1\45\1\46\1\47\1\0\1\50" +
                    "\1\51\1\52\1\53\1\54\2\0\1\17\1\0\1\55" +
                    "\1\56\1\57\20\25\1\60\1\61\4\25\1\62\1\63" +
                    "\10\25\1\64\1\37\1\0\2\51\1\0\1\65\1\66" +
                    "\1\67\12\25\1\70\2\25\1\71\2\25\1\72\1\73" +
                    "\1\25\1\74\1\75\13\25\3\0\1\76\2\25\1\77" +
                    "\4\25\1\100\14\25\1\101\1\25\1\102\2\0\1\103" +
                    "\1\104\1\105\3\25\1\106\2\25\1\107\5\25\1\110" +
                    "\1\25\1\111\5\25\1\112\1\113\1\114\1\115\1\116" +
                    "\1\25\1\117\1\120\1\25\1\121\1\122\1\123";

    private static int[] zzUnpackAction() {
        int[] result = new int[219];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /**
     * Translates a state to a row index in the transition table
     */
    private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

    private static final String ZZ_ROWMAP_PACKED_0 =
            "\0\0\0\75\0\172\0\267\0\364\0\u0131\0\u0131\0\u016e" +
                    "\0\u01ab\0\u0131\0\u01e8\0\u0131\0\u0131\0\u0131\0\u0131\0\u0225" +
                    "\0\u0262\0\u0131\0\u029f\0\u02dc\0\u0319\0\u0356\0\u0393\0\u0131" +
                    "\0\u0131\0\u03d0\0\u040d\0\u044a\0\u0487\0\u0131\0\u04c4\0\u0131" +
                    "\0\u0501\0\u053e\0\u057b\0\u05b8\0\u05f5\0\u0632\0\u066f\0\u06ac" +
                    "\0\u06e9\0\u0726\0\u0763\0\u07a0\0\u07dd\0\u081a\0\u0857\0\u0894" +
                    "\0\u0131\0\u0131\0\u0131\0\u0131\0\u0131\0\u0131\0\u08d1\0\u090e" +
                    "\0\u0131\0\u094b\0\u0988\0\u09c5\0\u0131\0\u0a02\0\u0a3f\0\u0131" +
                    "\0\u0131\0\u0131\0\u0131\0\u0131\0\u0131\0\u02dc\0\u0131\0\u0a7c" +
                    "\0\u0131\0\u0131\0\u0131\0\u0ab9\0\u0af6\0\u0131\0\u0b33\0\u0131" +
                    "\0\u0131\0\u0131\0\u0b70\0\u0bad\0\u0bea\0\u0c27\0\u0c64\0\u0ca1" +
                    "\0\u0cde\0\u0d1b\0\u0d58\0\u0d95\0\u0dd2\0\u0e0f\0\u0e4c\0\u0e89" +
                    "\0\u0ec6\0\u0f03\0\u0487\0\u0f40\0\u0f7d\0\u0fba\0\u0ff7\0\u1034" +
                    "\0\u0487\0\u0487\0\u1071\0\u10ae\0\u10eb\0\u1128\0\u1165\0\u11a2" +
                    "\0\u11df\0\u121c\0\u0131\0\u1259\0\u1296\0\u12d3\0\u1310\0\u134d" +
                    "\0\u134d\0\u0b33\0\u0487\0\u138a\0\u13c7\0\u1404\0\u1441\0\u147e" +
                    "\0\u14bb\0\u14f8\0\u1535\0\u1572\0\u15af\0\u0487\0\u15ec\0\u1629" +
                    "\0\u1666\0\u16a3\0\u16e0\0\u0487\0\u0487\0\u171d\0\u0487\0\u0487" +
                    "\0\u175a\0\u1797\0\u17d4\0\u1811\0\u184e\0\u188b\0\u18c8\0\u1905" +
                    "\0\u1942\0\u197f\0\u19bc\0\u094b\0\u19f9\0\u1a36\0\u0487\0\u1a73" +
                    "\0\u1ab0\0\u0487\0\u1aed\0\u1b2a\0\u1b67\0\u1ba4\0\u0487\0\u1be1" +
                    "\0\u1c1e\0\u1c5b\0\u1c98\0\u1cd5\0\u1d12\0\u1d4f\0\u1d8c\0\u1dc9" +
                    "\0\u1e06\0\u1e43\0\u1e80\0\u0487\0\u1ebd\0\u0487\0\u1efa\0\u1310" +
                    "\0\u0487\0\u0487\0\u0487\0\u1f37\0\u1f74\0\u1fb1\0\u0487\0\u1fee" +
                    "\0\u202b\0\u0487\0\u2068\0\u20a5\0\u20e2\0\u211f\0\u215c\0\u0487" +
                    "\0\u2199\0\u0487\0\u21d6\0\u2213\0\u2250\0\u228d\0\u22ca\0\u0487" +
                    "\0\u0487\0\u0487\0\u0487\0\u0487\0\u2307\0\u0487\0\u0487\0\u2344" +
                    "\0\u0487\0\u0487\0\u0487";

    private static int[] zzUnpackRowMap() {
        int[] result = new int[219];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int[] result) {
        int i = 0;  /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    /**
     * The transition table of the DFA
     */
    private static final int[] ZZ_TRANS = zzUnpackTrans();

    private static final String ZZ_TRANS_PACKED_0 =
            "\1\6\3\7\1\10\1\11\1\12\1\13\1\14\1\15" +
                    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25" +
                    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\5\35" +
                    "\1\36\1\6\1\37\1\40\1\6\1\41\1\42\1\43" +
                    "\1\44\1\45\1\46\2\35\1\47\1\35\1\50\1\51" +
                    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\3\35" +
                    "\1\61\1\62\1\63\1\64\1\65\2\6\1\65\1\6" +
                    "\1\65\1\6\2\65\1\66\25\65\1\67\35\65\1\70" +
                    "\2\6\1\70\1\6\1\70\1\71\2\70\1\6\25\70" +
                    "\1\72\35\70\2\73\1\66\72\73\1\74\2\75\1\74" +
                    "\1\76\7\74\1\77\4\74\1\6\53\74\77\0\1\7" +
                    "\121\0\1\100\74\0\1\101\74\0\1\102\62\0\1\103" +
                    "\11\0\1\104\64\0\1\105\1\106\1\0\1\26\1\27" +
                    "\3\0\1\107\67\0\2\110\65\0\1\111\4\0\1\112" +
                    "\5\0\1\113\65\0\1\110\1\0\2\114\6\0\1\115" +
                    "\2\0\1\116\11\0\1\115\5\0\1\116\11\0\1\117" +
                    "\25\0\1\110\1\0\2\27\6\0\1\115\2\0\1\116" +
                    "\11\0\1\115\5\0\1\116\46\0\1\120\74\0\1\121" +
                    "\74\0\1\122\67\0\2\35\5\0\5\35\4\0\27\35" +
                    "\42\0\1\22\60\0\2\35\5\0\5\35\4\0\14\35" +
                    "\1\123\5\35\1\124\4\35\26\0\2\35\5\0\5\35" +
                    "\4\0\5\35\1\125\7\35\1\126\1\35\1\127\7\35" +
                    "\26\0\2\35\5\0\5\35\4\0\1\35\1\130\6\35" +
                    "\1\131\4\35\1\132\11\35\26\0\2\35\5\0\5\35" +
                    "\4\0\5\35\1\133\7\35\1\134\11\35\26\0\2\35" +
                    "\5\0\5\35\4\0\13\35\1\135\1\136\12\35\26\0" +
                    "\2\35\5\0\5\35\4\0\1\35\1\137\11\35\1\140" +
                    "\1\35\1\141\4\35\1\142\4\35\26\0\2\35\5\0" +
                    "\5\35\4\0\6\35\1\143\5\35\1\144\12\35\26\0" +
                    "\2\35\5\0\5\35\4\0\5\35\1\145\7\35\1\146" +
                    "\11\35\26\0\2\35\5\0\5\35\4\0\5\35\1\147" +
                    "\7\35\1\150\11\35\26\0\2\35\5\0\5\35\4\0" +
                    "\6\35\1\151\10\35\1\152\7\35\26\0\2\35\5\0" +
                    "\5\35\4\0\17\35\1\153\7\35\26\0\2\35\5\0" +
                    "\5\35\4\0\5\35\1\154\21\35\26\0\2\35\5\0" +
                    "\5\35\4\0\11\35\1\155\7\35\1\156\2\35\1\157" +
                    "\2\35\26\0\2\35\5\0\5\35\4\0\17\35\1\160" +
                    "\7\35\26\0\2\35\5\0\5\35\4\0\14\35\1\161" +
                    "\12\35\26\0\2\35\5\0\5\35\4\0\15\35\1\162" +
                    "\11\35\12\0\1\163\2\0\1\163\25\0\1\163\16\0" +
                    "\1\163\2\0\1\163\1\0\1\163\11\0\1\70\2\0" +
                    "\1\70\1\0\1\70\1\0\2\70\1\0\25\70\1\0" +
                    "\35\70\6\0\1\164\2\0\1\164\25\0\1\164\16\0" +
                    "\1\164\2\0\1\164\1\0\1\164\11\0\2\73\1\0" +
                    "\72\73\1\74\2\0\1\74\1\0\7\74\1\0\4\74" +
                    "\1\0\53\74\2\0\1\75\113\0\1\66\73\0\1\165" +
                    "\1\0\2\166\6\0\1\115\1\167\13\0\1\115\1\167" +
                    "\44\0\1\110\1\0\2\114\6\0\1\115\14\0\1\115" +
                    "\42\0\1\170\1\0\1\170\2\0\2\171\73\0\2\172" +
                    "\5\0\3\172\7\0\6\172\46\0\2\35\5\0\5\35" +
                    "\4\0\4\35\1\173\22\35\26\0\2\35\5\0\5\35" +
                    "\4\0\21\35\1\174\5\35\26\0\2\35\5\0\5\35" +
                    "\4\0\7\35\1\175\17\35\26\0\2\35\5\0\5\35" +
                    "\4\0\15\35\1\176\11\35\26\0\2\35\5\0\5\35" +
                    "\4\0\5\35\1\177\21\35\26\0\2\35\5\0\5\35" +
                    "\4\0\20\35\1\200\6\35\26\0\2\35\5\0\5\35" +
                    "\4\0\1\35\1\201\25\35\26\0\2\35\5\0\5\35" +
                    "\4\0\14\35\1\202\12\35\26\0\2\35\5\0\5\35" +
                    "\4\0\6\35\1\203\20\35\26\0\2\35\5\0\5\35" +
                    "\4\0\22\35\1\204\4\35\26\0\2\35\5\0\5\35" +
                    "\4\0\20\35\1\205\6\35\26\0\2\35\5\0\5\35" +
                    "\4\0\4\35\1\206\22\35\26\0\2\35\5\0\5\35" +
                    "\4\0\13\35\1\207\13\35\26\0\2\35\5\0\5\35" +
                    "\4\0\15\35\1\210\11\35\26\0\2\35\5\0\5\35" +
                    "\4\0\17\35\1\211\7\35\26\0\2\35\5\0\5\35" +
                    "\4\0\14\35\1\212\12\35\26\0\2\35\5\0\5\35" +
                    "\4\0\16\35\1\213\2\35\1\214\5\35\26\0\2\35" +
                    "\5\0\5\35\4\0\14\35\1\215\12\35\26\0\2\35" +
                    "\5\0\5\35\4\0\14\35\1\216\12\35\26\0\2\35" +
                    "\5\0\5\35\4\0\24\35\1\217\2\35\26\0\2\35" +
                    "\5\0\5\35\4\0\21\35\1\220\5\35\26\0\2\35" +
                    "\5\0\5\35\4\0\11\35\1\221\15\35\26\0\2\35" +
                    "\5\0\5\35\4\0\3\35\1\222\12\35\1\223\2\35" +
                    "\1\224\5\35\26\0\2\35\5\0\5\35\4\0\26\35" +
                    "\1\225\26\0\2\35\5\0\5\35\4\0\1\35\1\226" +
                    "\15\35\1\227\7\35\26\0\2\35\5\0\5\35\4\0" +
                    "\11\35\1\230\15\35\26\0\2\35\5\0\5\35\4\0" +
                    "\22\35\1\231\4\35\26\0\2\35\5\0\5\35\4\0" +
                    "\21\35\1\232\5\35\26\0\2\35\5\0\5\35\4\0" +
                    "\11\35\1\233\15\35\43\0\1\234\57\0\2\235\71\0" +
                    "\1\235\1\0\2\166\6\0\1\115\1\167\13\0\1\115" +
                    "\1\167\44\0\1\165\1\0\2\236\6\0\1\115\14\0" +
                    "\1\115\47\0\2\171\73\0\2\35\5\0\5\35\4\0" +
                    "\15\35\1\237\11\35\26\0\2\35\5\0\5\35\4\0" +
                    "\11\35\1\240\15\35\26\0\2\35\5\0\5\35\4\0" +
                    "\13\35\1\214\13\35\26\0\2\35\5\0\5\35\4\0" +
                    "\1\35\1\241\25\35\26\0\2\35\5\0\5\35\4\0" +
                    "\5\35\1\242\21\35\26\0\2\35\5\0\5\35\4\0" +
                    "\17\35\1\214\7\35\26\0\2\35\5\0\5\35\4\0" +
                    "\20\35\1\243\1\244\5\35\26\0\2\35\5\0\5\35" +
                    "\4\0\1\35\1\245\25\35\26\0\2\35\5\0\5\35" +
                    "\4\0\2\35\1\246\24\35\26\0\2\35\5\0\5\35" +
                    "\4\0\5\35\1\247\21\35\26\0\2\35\5\0\5\35" +
                    "\4\0\20\35\1\250\6\35\26\0\2\35\5\0\5\35" +
                    "\4\0\1\35\1\251\25\35\26\0\2\35\5\0\5\35" +
                    "\4\0\5\35\1\252\21\35\26\0\2\35\5\0\5\35" +
                    "\4\0\3\35\1\253\23\35\26\0\2\35\5\0\5\35" +
                    "\4\0\22\35\1\254\4\35\26\0\2\35\5\0\5\35" +
                    "\4\0\7\35\1\214\17\35\26\0\2\35\5\0\5\35" +
                    "\4\0\14\35\1\255\12\35\26\0\2\35\5\0\5\35" +
                    "\4\0\15\35\1\256\11\35\26\0\2\35\5\0\5\35" +
                    "\4\0\5\35\1\257\21\35\26\0\2\35\5\0\5\35" +
                    "\4\0\22\35\1\260\4\35\26\0\2\35\5\0\5\35" +
                    "\4\0\5\35\1\261\21\35\26\0\2\35\5\0\5\35" +
                    "\4\0\17\35\1\262\7\35\26\0\2\35\5\0\5\35" +
                    "\4\0\11\35\1\146\15\35\26\0\2\35\5\0\5\35" +
                    "\4\0\21\35\1\263\5\35\26\0\2\35\5\0\5\35" +
                    "\4\0\5\35\1\264\21\35\26\0\2\35\5\0\5\35" +
                    "\4\0\11\35\1\265\15\35\26\0\2\35\5\0\5\35" +
                    "\4\0\4\35\1\266\22\35\24\0\1\165\1\0\2\267" +
                    "\6\0\1\115\1\270\13\0\1\115\1\270\44\0\1\235" +
                    "\1\0\2\236\6\0\1\115\14\0\1\115\47\0\2\35" +
                    "\5\0\5\35\4\0\14\35\1\271\12\35\26\0\2\35" +
                    "\5\0\5\35\4\0\12\35\1\272\14\35\26\0\2\35" +
                    "\5\0\5\35\4\0\21\35\1\273\5\35\26\0\2\35" +
                    "\5\0\5\35\4\0\11\35\1\274\15\35\26\0\2\35" +
                    "\5\0\5\35\4\0\22\35\1\275\4\35\26\0\2\35" +
                    "\5\0\5\35\4\0\13\35\1\276\13\35\26\0\2\35" +
                    "\5\0\5\35\4\0\5\35\1\277\21\35\26\0\2\35" +
                    "\5\0\5\35\4\0\21\35\1\214\5\35\26\0\2\35" +
                    "\5\0\5\35\4\0\1\35\1\300\25\35\26\0\2\35" +
                    "\5\0\5\35\4\0\21\35\1\301\5\35\26\0\2\35" +
                    "\5\0\5\35\4\0\21\35\1\302\5\35\26\0\2\35" +
                    "\5\0\5\35\4\0\21\35\1\303\5\35\26\0\2\35" +
                    "\5\0\5\35\4\0\17\35\1\304\7\35\26\0\2\35" +
                    "\5\0\5\35\4\0\1\35\1\305\25\35\26\0\2\35" +
                    "\5\0\5\35\4\0\17\35\1\306\7\35\26\0\2\35" +
                    "\5\0\5\35\4\0\15\35\1\307\11\35\26\0\2\35" +
                    "\5\0\5\35\4\0\21\35\1\310\5\35\26\0\2\35" +
                    "\5\0\5\35\4\0\3\35\1\311\23\35\26\0\2\35" +
                    "\5\0\5\35\4\0\13\35\1\312\13\35\24\0\1\235" +
                    "\1\0\2\267\6\0\1\115\1\270\13\0\1\115\1\270" +
                    "\46\0\2\35\5\0\5\35\4\0\14\35\1\313\12\35" +
                    "\26\0\2\35\5\0\5\35\4\0\13\35\1\314\13\35" +
                    "\26\0\2\35\5\0\5\35\4\0\5\35\1\214\21\35" +
                    "\26\0\2\35\5\0\5\35\4\0\3\35\1\315\23\35" +
                    "\26\0\2\35\5\0\5\35\4\0\11\35\1\316\15\35" +
                    "\26\0\2\35\5\0\5\35\4\0\13\35\1\317\13\35" +
                    "\26\0\2\35\5\0\5\35\4\0\4\35\1\320\22\35" +
                    "\26\0\2\35\5\0\5\35\4\0\21\35\1\321\5\35" +
                    "\26\0\2\35\5\0\5\35\4\0\14\35\1\322\12\35" +
                    "\26\0\2\35\5\0\5\35\4\0\6\35\1\323\20\35" +
                    "\26\0\2\35\5\0\5\35\4\0\10\35\1\324\16\35" +
                    "\26\0\2\35\5\0\5\35\4\0\22\35\1\325\4\35" +
                    "\26\0\2\35\5\0\5\35\4\0\21\35\1\326\5\35" +
                    "\26\0\2\35\5\0\5\35\4\0\10\35\1\327\16\35" +
                    "\26\0\2\35\5\0\5\35\4\0\15\35\1\330\11\35" +
                    "\26\0\2\35\5\0\5\35\4\0\14\35\1\331\12\35" +
                    "\26\0\2\35\5\0\5\35\4\0\5\35\1\332\21\35" +
                    "\26\0\2\35\5\0\5\35\4\0\14\35\1\333\12\35" +
                    "\4\0";

    private static int[] zzUnpackTrans() {
        int[] result = new int[9089];
        int offset = 0;
        offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackTrans(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /**
     * Error code for "Unknown internal scanner error".
     */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    /**
     * Error code for "could not match input".
     */
    private static final int ZZ_NO_MATCH = 1;
    /**
     * Error code for "pushback value was too large".
     */
    private static final int ZZ_PUSHBACK_2BIG = 2;

    /**
     * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
     * {@link #ZZ_PUSHBACK_2BIG} respectively.
     */
    private static final String ZZ_ERROR_MSG[] = {
            "Unknown internal scanner error",
            "Error: could not match input",
            "Error: pushback value was too large"
    };

    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
     */
    private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

    private static final String ZZ_ATTRIBUTE_PACKED_0 =
            "\5\0\2\11\2\1\1\11\1\1\4\11\2\1\1\11" +
                    "\5\1\2\11\4\1\1\11\1\1\1\11\20\1\6\11" +
                    "\2\1\1\11\3\1\1\11\2\1\6\11\1\0\1\11" +
                    "\1\1\3\11\2\0\1\11\1\0\3\11\40\1\1\11" +
                    "\1\1\1\0\2\1\1\0\43\1\3\0\30\1\2\0" +
                    "\43\1";

    private static int[] zzUnpackAttribute() {
        int[] result = new int[219];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /**
     * Input device.
     */
    private java.io.Reader zzReader;

    /**
     * Current state of the DFA.
     */
    private int zzState;

    /**
     * Current lexical state.
     */
    private int zzLexicalState = YYINITIAL;

    /**
     * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
     * string.
     */
    private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

    /**
     * Text position at the last accepting state.
     */
    private int zzMarkedPos;

    /**
     * Current text position in the buffer.
     */
    private int zzCurrentPos;

    /**
     * Marks the beginning of the {@link #yytext()} string in the buffer.
     */
    private int zzStartRead;

    /**
     * Marks the last character in the buffer, that has been read from input.
     */
    private int zzEndRead;

    /**
     * Whether the scanner is at the end of file.
     *
     * @see #yyatEOF
     */
    private boolean zzAtEOF;

    /**
     * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
     *
     * <p>When a lead/high surrogate has been read from the input stream into the final
     * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
     */
    private int zzFinalHighSurrogate = 0;

    /**
     * Number of newlines encountered up to the start of the matched text.
     */
    private int yyline;

    /**
     * Number of characters from the last newline up to the start of the matched text.
     */
    private int yycolumn;

    /**
     * Number of characters up to the start of the matched text.
     */
    @SuppressWarnings("unused")
    private long yychar;

    /**
     * Whether the scanner is currently at the beginning of a line.
     */
    @SuppressWarnings("unused")
    private boolean zzAtBOL = true;

    /**
     * Whether the user-EOF-code has already been executed.
     */
    @SuppressWarnings("unused")
    private boolean zzEOFDone;

    /* user code: */
    private boolean flag = false;
    private HashSet<String> records = new HashSet<String>();

    private MySymbol symbol(String token) {
        System.err.println("Obtain token " + token + " \"" + yytext() + "\"");
        return new MySymbol(token, yytext());
    }

    private MySymbol symbol(String token, Object val) {
        System.err.println("Obtain token " + token + " \"" + yytext() + "\"");
        return new MySymbol(token, val);
    }

    StringBuilder string = new StringBuilder();


    /**
     * Creates a new scanner
     *
     * @param in the java.io.Reader to read input from.
     */
    public scanner(java.io.Reader in) {
        this.zzReader = in;
    }

    /**
     * Translates raw input code points to DFA table row
     */
    private static int zzCMap(int input) {
        int offset = input & 255;
        return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
    }

    /**
     * Refills the input buffer.
     *
     * @return {@code false} iff there was new input.
     * @throws IOException if any I/O-Error occurs
     */
    private boolean zzRefill() throws IOException {

        /* first: make room (if you can) */
        if (zzStartRead > 0) {
            zzEndRead += zzFinalHighSurrogate;
            zzFinalHighSurrogate = 0;
            System.arraycopy(zzBuffer, zzStartRead,
                    zzBuffer, 0,
                    zzEndRead - zzStartRead);

            /* translate stored positions */
            zzEndRead -= zzStartRead;
            zzCurrentPos -= zzStartRead;
            zzMarkedPos -= zzStartRead;
            zzStartRead = 0;
        }

        /* is the buffer big enough? */
        if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
            /* if not: blow it up */
            char newBuffer[] = new char[zzBuffer.length * 2];
            System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
            zzBuffer = newBuffer;
            zzEndRead += zzFinalHighSurrogate;
            zzFinalHighSurrogate = 0;
        }

        /* fill the buffer with new input */
        int requested = zzBuffer.length - zzEndRead;
        int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

        /* not supposed to occur according to specification of java.io.Reader */
        if (numRead == 0) {
            throw new IOException(
                    "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
        }
        if (numRead > 0) {
            zzEndRead += numRead;
            if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
                if (numRead == requested) { // We requested too few chars to encode a full Unicode character
                    --zzEndRead;
                    zzFinalHighSurrogate = 1;
                } else {                    // There is room in the buffer for at least one more char
                    int c = zzReader.read();  // Expecting to read a paired low surrogate char
                    if (c == -1) {
                        return true;
                    } else {
                        zzBuffer[zzEndRead++] = (char) c;
                    }
                }
            }
            /* potentially more input available */
            return false;
        }

        /* numRead < 0 ==> end of stream */
        return true;
    }


    /**
     * Closes the input reader.
     *
     * @throws IOException if the reader could not be closed.
     */
    public final void yyclose() throws IOException {
        zzAtEOF = true; // indicate end of file
        zzEndRead = zzStartRead; // invalidate buffer

        if (zzReader != null) {
            zzReader.close();
        }
    }


    /**
     * Resets the scanner to read from a new input stream.
     *
     * <p>Does not close the old reader.
     *
     * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
     * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
     *
     * <p>Internal scan buffer is resized down to its initial length, if it has grown.
     *
     * @param reader The new input stream.
     */
    public final void yyreset(java.io.Reader reader) {
        zzReader = reader;
        zzEOFDone = false;
        yyResetPosition();
        zzLexicalState = YYINITIAL;
        if (zzBuffer.length > ZZ_BUFFERSIZE) {
            zzBuffer = new char[ZZ_BUFFERSIZE];
        }
    }

    /**
     * Resets the input position.
     */
    private final void yyResetPosition() {
        zzAtBOL = true;
        zzAtEOF = false;
        zzCurrentPos = 0;
        zzMarkedPos = 0;
        zzStartRead = 0;
        zzEndRead = 0;
        zzFinalHighSurrogate = 0;
        yyline = 0;
        yycolumn = 0;
        yychar = 0L;
    }


    /**
     * Returns whether the scanner has reached the end of the reader it reads from.
     *
     * @return whether the scanner has reached EOF.
     */
    public final boolean yyatEOF() {
        return zzAtEOF;
    }


    /**
     * Returns the current lexical state.
     *
     * @return the current lexical state.
     */
    public final int yystate() {
        return zzLexicalState;
    }


    /**
     * Enters a new lexical state.
     *
     * @param newState the new lexical state
     */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }


    /**
     * Returns the text matched by the current regular expression.
     *
     * @return the matched text.
     */
    public final String yytext() {
        return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
    }


    /**
     * Returns the character at the given position from the matched text.
     *
     * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
     *
     * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
     * @return the character at {@code position}.
     */
    public final char yycharat(int position) {
        return zzBuffer[zzStartRead + position];
    }


    /**
     * How many characters were matched.
     *
     * @return the length of the matched text region.
     */
    public final int yylength() {
        return zzMarkedPos - zzStartRead;
    }


    /**
     * Reports an error that occurred while scanning.
     *
     * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
     * match-all fallback rule) this method will only be called with things that
     * "Can't Possibly Happen".
     *
     * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
     * scanner etc.).
     *
     * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
     *
     * @param errorCode the code of the error message to display.
     */
    private static void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        } catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }


    /**
     * Pushes the specified amount of characters back into the input stream.
     *
     * <p>They will be read again by then next call of the scanning method.
     *
     * @param number the number of characters to be read again. This number must not be greater than
     *               {@link #yylength()}.
     */
    public void yypushback(int number) {
        if (number > yylength())
            zzScanError(ZZ_PUSHBACK_2BIG);

        zzMarkedPos -= number;
    }


    /**
     * Resumes scanning until the next regular expression is matched, the end of input is encountered
     * or an I/O-Error occurs.
     *
     * @return the next token.
     * @throws IOException if any I/O-Error occurs.
     */
    public MySymbol next_token() throws IOException {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        char[] zzBufferL = zzBuffer;

        int[] zzTransL = ZZ_TRANS;
        int[] zzRowMapL = ZZ_ROWMAP;
        int[] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            boolean zzR = false;
            int zzCh;
            int zzCharCount;
            for (zzCurrentPosL = zzStartRead;
                 zzCurrentPosL < zzMarkedPosL;
                 zzCurrentPosL += zzCharCount) {
                zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
                zzCharCount = Character.charCount(zzCh);
                switch (zzCh) {
                    case '\u000B':  // fall through
                    case '\u000C':  // fall through
                    case '\u0085':  // fall through
                    case '\u2028':  // fall through
                    case '\u2029':
                        yyline++;
                        yycolumn = 0;
                        zzR = false;
                        break;
                    case '\r':
                        yyline++;
                        yycolumn = 0;
                        zzR = true;
                        break;
                    case '\n':
                        if (zzR)
                            zzR = false;
                        else {
                            yyline++;
                            yycolumn = 0;
                        }
                        break;
                    default:
                        zzR = false;
                        yycolumn += zzCharCount;
                }
            }

            if (zzR) {
                // peek one character ahead if it is
                // (if we have counted one line too much)
                boolean zzPeek;
                if (zzMarkedPosL < zzEndReadL)
                    zzPeek = zzBufferL[zzMarkedPosL] == '\n';
                else if (zzAtEOF)
                    zzPeek = false;
                else {
                    boolean eof = zzRefill();
                    zzEndReadL = zzEndRead;
                    zzMarkedPosL = zzMarkedPos;
                    zzBufferL = zzBuffer;
                    if (eof)
                        zzPeek = false;
                    else
                        zzPeek = zzBufferL[zzMarkedPosL] == '\n';
                }
                if (zzPeek) yyline--;
            }
            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            zzState = ZZ_LEXSTATE[zzLexicalState];

            // set up zzAction for empty match case:
            int zzAttributes = zzAttrL[zzState];
            if ((zzAttributes & 1) == 1) {
                zzAction = zzState;
            }


            zzForAction:
            {
                while (true) {

                    if (zzCurrentPosL < zzEndReadL) {
                        zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
                        zzCurrentPosL += Character.charCount(zzInput);
                    } else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    } else {
                        // store back cached positions
                        zzCurrentPos = zzCurrentPosL;
                        zzMarkedPos = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL = zzCurrentPos;
                        zzMarkedPosL = zzMarkedPos;
                        zzBufferL = zzBuffer;
                        zzEndReadL = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        } else {
                            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
                            zzCurrentPosL += Character.charCount(zzInput);
                        }
                    }
                    int zzNext = zzTransL[zzRowMapL[zzState] + zzCMap(zzInput)];
                    if (zzNext == -1) break zzForAction;
                    zzState = zzNext;

                    zzAttributes = zzAttrL[zzState];
                    if ((zzAttributes & 1) == 1) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ((zzAttributes & 8) == 8) break zzForAction;
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                zzAtEOF = true;
                {
                    return symbol("$");
                }
            } else {
                switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                    case 1: {
                        throw new RuntimeException("Illegal character \"" + yytext() +
                                "\" at line " + yyline + ", column " + yycolumn);
                    }
                    // fall through
                    case 84:
                        break;
                    case 2: { /* skip */
                    }
                    // fall through
                    case 85:
                        break;
                    case 3: {
                        yybegin(STRING);
                        string.setLength(0);
                        string.append("\"");
                    }
                    // fall through
                    case 86:
                        break;
                    case 4: {
                        return symbol("%");
                    }
                    // fall through
                    case 87:
                        break;
                    case 5: {
                        return symbol("&");
                    }
                    // fall through
                    case 88:
                        break;
                    case 6: {
                        yybegin(CHARACTER);
                        string.setLength(0);
                        string.append("'");
                    }
                    // fall through
                    case 89:
                        break;
                    case 7: {
                        return symbol("(");
                    }
                    // fall through
                    case 90:
                        break;
                    case 8: {
                        return symbol(")");
                    }
                    // fall through
                    case 91:
                        break;
                    case 9: {
                        return symbol("*");
                    }
                    // fall through
                    case 92:
                        break;
                    case 10: {
                        return symbol("+");
                    }
                    // fall through
                    case 93:
                        break;
                    case 11: {
                        return symbol("va");
                    }
                    // fall through
                    case 94:
                        break;
                    case 12: {
                        return symbol("-");
                    }
                    // fall through
                    case 95:
                        break;
                    case 13: {
                        return symbol(".");
                    }
                    // fall through
                    case 96:
                        break;
                    case 14: {
                        return symbol("/");
                    }
                    // fall through
                    case 97:
                        break;
                    case 15: {
                        return symbol("int_const", Integer.valueOf(yytext()));
                    }
                    // fall through
                    case 98:
                        break;
                    case 16: {
                        return symbol(":");
                    }
                    // fall through
                    case 99:
                        break;
                    case 17: {
                        return symbol(";");
                    }
                    // fall through
                    case 100:
                        break;
                    case 18: {
                        return symbol("<");
                    }
                    // fall through
                    case 101:
                        break;
                    case 19: {
                        return symbol("=");
                    }
                    // fall through
                    case 102:
                        break;
                    case 20: {
                        return symbol(">");
                    }
                    // fall through
                    case 103:
                        break;
                    case 21: {
                        String temp = yytext();
                        if (records.contains(temp)) {
                            flag = false;
                            return symbol("rec_id", temp);
                        }
                        if (flag) {
                            flag = false;
                            records.add(temp);
                            return symbol("rec_id", temp);
                        }
                        return symbol("id", temp);
                    }
                    // fall through
                    case 104:
                        break;
                    case 22: {
                        return symbol("[");
                    }
                    // fall through
                    case 105:
                        break;
                    case 23: {
                        return symbol("]");
                    }
                    // fall through
                    case 106:
                        break;
                    case 24: {
                        return symbol("^");
                    }
                    // fall through
                    case 107:
                        break;
                    case 25: {
                        return symbol("open");
                    }
                    // fall through
                    case 108:
                        break;
                    case 26: {
                        return symbol("|");
                    }
                    // fall through
                    case 109:
                        break;
                    case 27: {
                        return symbol("close");
                    }
                    // fall through
                    case 110:
                        break;
                    case 28: {
                        return symbol("tilda");
                    }
                    // fall through
                    case 111:
                        break;
                    case 29: {
                        return symbol("char", yytext().charAt(0));
                    }
                    // fall through
                    case 112:
                        break;
                    case 30: {
                        yybegin(YYINITIAL);
                    }
                    // fall through
                    case 113:
                        break;
                    case 31: {
                        string.append(yytext());
                    }
                    // fall through
                    case 114:
                        break;
                    case 32: {
                        yybegin(YYINITIAL);
                        string.append("\"");
                        StringBuilder temp = string;
                        string = new StringBuilder();
                        return symbol("string", temp.toString());
                    }
                    // fall through
                    case 115:
                        break;
                    case 33: {
                    }
                    // fall through
                    case 116:
                        break;
                    case 34: {
                        return symbol("!=");
                    }
                    // fall through
                    case 117:
                        break;
                    case 35: {
                        return symbol("%=");
                    }
                    // fall through
                    case 118:
                        break;
                    case 36: {
                        return symbol("*=");
                    }
                    // fall through
                    case 119:
                        break;
                    case 37: {
                        return symbol("++");
                    }
                    // fall through
                    case 120:
                        break;
                    case 38: {
                        return symbol("+=");
                    }
                    // fall through
                    case 121:
                        break;
                    case 39: {
                        return symbol("--");
                    }
                    // fall through
                    case 122:
                        break;
                    case 40: {
                        return symbol("-=");
                    }
                    // fall through
                    case 123:
                        break;
                    case 41: {
                        return symbol("real_const", Double.valueOf(yytext()));
                    }
                    // fall through
                    case 124:
                        break;
                    case 42: {
                        yybegin(MULT_COMMENT);
                        string.setLength(0);
                        string.append("/*");
                    }
                    // fall through
                    case 125:
                        break;
                    case 43: {
                        yybegin(SINGLE_COMMENT);
                        string.setLength(0);
                        string.append("//");
                    }
                    // fall through
                    case 126:
                        break;
                    case 44: {
                        return symbol("/=");
                    }
                    // fall through
                    case 127:
                        break;
                    case 45: {
                        return symbol("<=");
                    }
                    // fall through
                    case 128:
                        break;
                    case 46: {
                        return symbol("==");
                    }
                    // fall through
                    case 129:
                        break;
                    case 47: {
                        return symbol(">=");
                    }
                    // fall through
                    case 130:
                        break;
                    case 48: {
                        return symbol("if");
                    }
                    // fall through
                    case 131:
                        break;
                    case 49: {
                        return symbol("in");
                    }
                    // fall through
                    case 132:
                        break;
                    case 50: {
                        return symbol("of");
                    }
                    // fall through
                    case 133:
                        break;
                    case 51: {
                        return symbol("or");
                    }
                    // fall through
                    case 134:
                        break;
                    case 52: {
                        return symbol("char", yytext().charAt(0));
                    }
                    // fall through
                    case 135:
                        break;
                    case 53: {
                        return symbol("real_const", yytext());
                    }
                    // fall through
                    case 136:
                        break;
                    case 54: {
                        return symbol("int_const", yytext());
                    }
                    // fall through
                    case 137:
                        break;
                    case 55: {
                        return symbol("and");
                    }
                    // fall through
                    case 138:
                        break;
                    case 56: {
                        return symbol("end");
                    }
                    // fall through
                    case 139:
                        break;
                    case 57: {
                        return symbol("for");
                    }
                    // fall through
                    case 140:
                        break;
                    case 58: {
                        return symbol("base_type");
                    }
                    // fall through
                    case 141:
                        break;
                    case 59: {
                        return symbol("len");
                    }
                    // fall through
                    case 142:
                        break;
                    case 60: {
                        return symbol("new");
                    }
                    // fall through
                    case 143:
                        break;
                    case 61: {
                        return symbol("not");
                    }
                    // fall through
                    case 144:
                        break;
                    case 62: {
                        return symbol("auto");
                    }
                    // fall through
                    case 145:
                        break;
                    case 63: {
                        return symbol("case");
                    }
                    // fall through
                    case 146:
                        break;
                    case 64: {
                        return symbol("else");
                    }
                    // fall through
                    case 147:
                        break;
                    case 65: {
                        return symbol("true", Boolean.valueOf(yytext()));
                    }
                    // fall through
                    case 148:
                        break;
                    case 66: {
                        return symbol("void");
                    }
                    // fall through
                    case 149:
                        break;
                    case 67: {
                        return symbol("begin");
                    }
                    // fall through
                    case 150:
                        break;
                    case 68: {
                        return symbol("break");
                    }
                    // fall through
                    case 151:
                        break;
                    case 69: {
                        return symbol("const");
                    }
                    // fall through
                    case 152:
                        break;
                    case 70: {
                        return symbol("false", Boolean.valueOf(yytext()));
                    }
                    // fall through
                    case 153:
                        break;
                    case 71: {
                        return symbol("input");
                    }
                    // fall through
                    case 154:
                        break;
                    case 72: {
                        return symbol("start");
                    }
                    // fall through
                    case 155:
                        break;
                    case 73: {
                        return symbol("until");
                    }
                    // fall through
                    case 156:
                        break;
                    case 74: {
                        flag = true;
                        return symbol("record");
                    }
                    // fall through
                    case 157:
                        break;
                    case 75: {
                        return symbol("repeat");
                    }
                    // fall through
                    case 158:
                        break;
                    case 76: {
                        return symbol("return");
                    }
                    // fall through
                    case 159:
                        break;
                    case 77: {
                        return symbol("sizeof");
                    }
                    // fall through
                    case 160:
                        break;
                    case 78: {
                        return symbol("switch");
                    }
                    // fall through
                    case 161:
                        break;
                    case 79: {
                        return symbol("default");
                    }
                    // fall through
                    case 162:
                        break;
                    case 80: {
                        return symbol("foreach");
                    }
                    // fall through
                    case 163:
                        break;
                    case 81: {
                        return symbol("println");
                    }
                    // fall through
                    case 164:
                        break;
                    case 82: {
                        return symbol("continue");
                    }
                    // fall through
                    case 165:
                        break;
                    case 83: {
                        return symbol("function");
                    }
                    // fall through
                    case 166:
                        break;
                    default:
                        zzScanError(ZZ_NO_MATCH);
                }
            }
        }
    }


    @Override
    public MySymbol currentToken() {
        return currentSymbol;
    }

    @Override
    public String nextToken() {
        try {
            currentSymbol = next_token();
            return currentSymbol.getToken();
        } catch (IOException e) {
            throw new RuntimeException("Unable to get next token", e);
        }
    }
}
